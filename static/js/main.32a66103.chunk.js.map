{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","nominees","winner","nominee","document","getElementById","value","trim","this","push","setState","e","charCode","handleAdd","nomLength","length","timeMultiplier","setTimeout","removeNom","Math","floor","random","index","noms","splice","show","hideButton","hideInput","hideStartButton","map","i","key","className","onClick","id","placeholder","onKeyPress","handleOnKeyPress","bind","autocomplete","handleWinner","startAgain","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAyHeA,G,kBArHb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,SAAU,GACVC,OAAQ,IAJM,E,yEAShB,IAEMC,EAFWC,SAASC,eAAe,OAEdC,MAEL,KAAnBH,EAAQI,SACTC,KAAKR,MAAMC,SAASQ,KAAKN,GACzBK,KAAKE,SAAS,CAACT,SAAUO,KAAKR,MAAMC,c,uCAKtBU,GACC,MAAdA,EAAEC,UACDJ,KAAKK,c,qCAIK,IAAD,OACIT,SAASC,eAAe,OAC9BC,MAAQ,GAOnB,IALA,IAEIQ,EAFaN,KAAKR,MAAMC,SAEHc,OACrBC,EAAiB,EAEfF,EAAY,GAEhBG,WAAW,WACT,EAAKC,UAAUC,KAAKC,MAAMD,KAAKE,SAAU,EAAKrB,MAAMC,SAASc,UAC5D,IAAIC,GAEPA,IAGkB,MAFlBF,GAIEG,WAAW,WAET,IAAMf,EAAU,EAAKF,MAAMC,SAAS,GACpC,EAAKS,SAAS,CAACR,OAAQA,IACvB,EAAKQ,SAAS,CAACT,SAAU,MAE1B,IAAIe,K,mCAMTR,KAAKE,SAAS,CAACR,OAAQ,KACvBM,KAAKE,SAAS,CAACT,SAAU,O,gCAGjBqB,GACV,IAAIC,EAAI,YAAOf,KAAKR,MAAMC,WACX,IAAXqB,IACFC,EAAKC,OAAOF,EAAO,GACnBd,KAAKE,SAAS,CAACT,SAAUsB,O,+BAIhB,IAAD,OACJE,EAA6B,KAAtBjB,KAAKR,MAAME,OAAgB,OAAS,wBAC3CwB,EAAmC,KAAtBlB,KAAKR,MAAME,OAAgB,OAAS,OACjDyB,EAAkC,KAAtBnB,KAAKR,MAAME,OAAgB,OAAS,OAChD0B,EAAwC,KAAtBpB,KAAKR,MAAME,OAAgB,OAAS,OAEpDD,EAAWO,KAAKR,MAAMC,SAAS4B,IAAI,SAAC1B,EAAS2B,GACjD,OAAQ,wBAAIC,IAAKD,EAAGE,UAAU,oBAAoBC,QAAS,kBAAM,EAAKf,UAAUY,KAAxE,IAA6E,wCAA7E,IAAkG3B,KAG5G,OACE,yBAAK6B,UAAU,aACb,yBAAKA,UAAU,SACb,4CAAiB,6BAAjB,uBACA,6BACE,2BAAOE,GAAG,MAAMF,UAAWL,EAAWQ,YAAY,UAAUC,WAAY5B,KAAK6B,iBAAiBC,KAAK9B,MAAO+B,aAAa,QAEvH,4BAAQP,UAAWN,EAAYO,QAASzB,KAAKgC,aAAaF,KAAK9B,OAA/D,iBACA,4BAAQwB,UAAWJ,EAAiBK,QAASzB,KAAKiC,WAAWH,KAAK9B,OAAlE,iBAGJ,yBAAKwB,UAAU,WACb,4BACG/B,GAIH,yBAAK+B,UAAWP,GACZ,yBAAKO,UAAU,aACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,aACjB,qDACA,uBAAGA,UAAU,4BAA4BxB,KAAKR,MAAME,OAApD,Y,GA9GMwC,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS9C,SAASC,eAAe,SD2H3C,kBAAmB8C,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.32a66103.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      nominees: [],\n      winner: \"\"\n    }\n  }\n  \n  handleAdd() {\n    var inputField = document.getElementById(\"add\");\n\n    const nominee = inputField.value;\n    \n    if(nominee.trim() !== \"\") {\n      this.state.nominees.push(nominee);\n      this.setState({nominees: this.state.nominees});\n    }\n    \n  }\n  \n  handleOnKeyPress (e) {\n    if(e.charCode == '13') {\n        this.handleAdd();\n       }\n  }\n  \n  handleWinner() {\n    var inputField = document.getElementById(\"add\");\n    inputField.value = \"\";\n\n    const nominees = this.state.nominees;\n    \n    var nomLength = nominees.length;\n    var timeMultiplier = 1;\n    \n    while(nomLength > 1) {\n \n      setTimeout(() => {\n        this.removeNom(Math.floor(Math.random()*(this.state.nominees.length)))\n      }, 500*timeMultiplier);\n      \n      timeMultiplier++;\n      nomLength--;\n\n      if (nomLength === 1) {\n        \n        setTimeout(() => {\n          \n          const winner =  this.state.nominees[0];\n          this.setState({winner: winner})\n          this.setState({nominees: []})\n        \n      }, 500*timeMultiplier);\n    }\n  }\n }\n  \n  startAgain() {\n    this.setState({winner: \"\"})\n    this.setState({nominees: []})\n  }\n  \n  removeNom(index) {\n  var noms = [...this.state.nominees]; \n  if (index !== -1) {\n    noms.splice(index, 1);\n    this.setState({nominees: noms});\n  }\n}\n  \n  render () {\n    var show = this.state.winner === \"\" ? \"hide\" : \"show winner-container\";\n    var hideButton = this.state.winner === \"\" ? \"show\" : \"hide\";\n    var hideInput = this.state.winner === \"\" ? \"show\" : \"hide\";\n    var hideStartButton = this.state.winner === \"\" ? \"hide\" : \"show\";\n    \n    const nominees = this.state.nominees.map((nominee, i) => {\n      return (<li key={i} className=\"animated fadeInUp\" onClick={() => this.removeNom(i)}> <span>&bull;</span> {nominee}</li>)\n    })\n    \n    return (\n      <div className=\"container\">\n        <div className=\"forms\">\n          <h1>PNI Creative <br/> Crushing it! Award</h1>\n          <div>\n            <input id=\"add\" className={hideInput} placeholder=\"Nominee\" onKeyPress={this.handleOnKeyPress.bind(this)} autocomplete=\"off\"/> \n\n            <button className={hideButton} onClick={this.handleWinner.bind(this)}>CRUSHING IT!!</button>\n            <button className={hideStartButton} onClick={this.startAgain.bind(this)}>Start Again</button>\n          </div>\n        </div>\n        <div className=\"content\">\n          <ul>\n            {nominees}\n          </ul>\n          \n          \n          <div className={show}>\n              <div className=\"confetti\"></div>\n              <div className=\"confetti\"></div>\n              <div className=\"confetti\"></div>\n              <div className=\"confetti\"></div>\n              <div className=\"confetti\"></div>\n              <div className=\"confetti\"></div>\n              <div className=\"confetti\"></div>\n              <div className=\"confetti\"></div>\n              <div className=\"confetti\"></div>\n              <div className=\"confetti\"></div>\n            <p>This week's winner is:</p>\n            <p className=\"animated fadeInUp winner\">{this.state.winner}!</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}