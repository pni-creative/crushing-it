{"version":3,"sources":["database.js","Winner.js","Inputs.js","Buttons.js","App.js","Json.js","serviceWorker.js","index.js"],"names":["AWS","require","config","update","accessKeyId","secretAccessKey","region","endpoint","docClient","DynamoDB","DocumentClient","module","exports","add","nominees","winner","params","TableName","Item","Date","toString","console","log","put","err","data","error","JSON","stringify","read","elementID","scan","onScan","Items","forEach","el","document","getElementById","innerHTML","LastEvaluatedKey","ExclusiveStartKey","Winner","className","this","props","hide","Array","map","i","key","React","Component","Inputs","id","hideInput","placeholder","onKeyPress","autoComplete","type","Buttons","hideButton","onClick","handleWinner","hideStartButton","startAgain","db","App","state","timesOfNomination","inputField","multipleField","nominee","value","multiplier","testNames","name","votes","length","j","push","setState","handleNominees","trim","n","m","parseInt","v","prevState","times","entries","e","charCode","handleAdd","nomLength","timeMultiplier","setTimeout","removeNom","Math","floor","random","index","noms","indexName","splice","filter","show","liStyle","fontSize","style","handleOnKeyPress","bind","Json","Boolean","window","location","hostname","match","routing","exact","path","component","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ae67bf4.chunk.js","sourcesContent":["var AWS = require(\"aws-sdk\");\n\nAWS.config.update({\n  accessKeyId: \"AKIASTVPISGV5DOV477Q\",\n  secretAccessKey: \"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\",\n  region: \"us-west-2\",\n  endpoint: \"https://dynamodb.us-west-2.amazonaws.com\"\n});\n\nvar docClient = new AWS.DynamoDB.DocumentClient();\nvar table = \"Crushin\";\n\nmodule.exports = {\n  \n  add: function(nominees, winner) {\n\n    var date = new Date();\n\n    var dateString = date.toString()\n\n    var params = {\n      TableName: table,\n      Item:{\n        \"date\": dateString,\n        \"winner\": winner,\n        \"names\": nominees\t\n      }\n    };\n\n    console.log(\"Adding a new item...\");\n    docClient.put(params, function(err, data) {\n      if (err) {\n        console.error(\"Unable to add item. Error JSON:\", JSON.stringify(err, null, 2));\n      } else {\n        console.log(\"Added item:\", JSON.stringify(data, null, 2));\n      }\n    });\n  },\n  \n  read: function(elementID) {\n\n    var params = {\n        TableName: table,\n    };\n\n    console.log(\"Scanning Crushin table.\");\n    docClient.scan(params, onScan);\n\n    function onScan(err, data) {\n      if (err) {\n        console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(err, null, 2));\n      } else {\n        console.log(\"Scan succeeded.\");\n\n        data.Items.forEach(function(data) {\n          var el = document.getElementById(elementID);\t\t\t\t\t\n          el.innerHTML += JSON.stringify(data, null, 2) + '\\n';\n        });\n\n        // continue scanning if we have more movies, because\n        // scan can retrieve a maximum of 1MB of data\n        if (typeof data.LastEvaluatedKey != \"undefined\") {\n            console.log(\"Scanning for more...\");\n            params.ExclusiveStartKey = data.LastEvaluatedKey;\n            docClient.scan(params, onScan);\n        } \n        }\n    }\n  }\n}\n\n\n","import React from 'react';\n\nclass Winner extends React.Component {\n    render () {\n        return (\n            <div className={this.props.hide}>\n                {\n                    [...Array(10)].map ( (i) => {\n                        return <div key={i} className=\"confetti\"></div>\n                    })\n\n                }\n                <p>This week's winner is:</p>\n                <p className=\"animated fadeInUp winner\">{this.props.winner}!</p>\n          </div>\n        )\n    }\n}\n\nexport default Winner;","import React from 'react';\n\nclass Inputs extends React.Component {\n    render () {\n        return (\n            <div>\n                <input id=\"add\" className={this.props.hideInput} placeholder=\"Nominee\" onKeyPress={this.props.onKeyPress} autoComplete=\"off\"/>\n                <input id=\"plus\" className={this.props.hideInput} placeholder=\"1\" onKeyPress={this.props.onKeyPress} autoComplete=\"off\" type=\"number\"/> \n            </div>\n        )\n    }\n}\n\nexport default Inputs;","import React from 'react';\n\nclass Buttons extends React.Component {\n    render () {\n        return (\n            <div>\n                <button className={this.props.hideButton} onClick={this.props.handleWinner}>CRUSHING IT!!</button>\n                <button className={this.props.hideStartButton} onClick={this.props.startAgain}>Start Again</button> \n            </div>\n        )\n    }\n}\n\nexport default Buttons;","import React from 'react';\nimport Winner from './Winner';\nimport Inputs from './Inputs';\nimport Buttons from './Buttons';\nimport './App.scss';\nvar db = require(\"./database.js\");\n\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      nominees: [],\n      winner: \"\",\n      timesOfNomination: [],\n    }\n  }\n  \n  handleAdd() {\n    var inputField = document.getElementById(\"add\");\n    var multipleField = document.getElementById(\"plus\");\n\n    const nominee = inputField.value;\n    const multiplier = multipleField.value;\n\n    if (nominee === \"test\") {\n      var testNames = \n        [\n          {name: \"amir\", votes: 4},\n          {name: \"david\", votes: 2},\n          {name: \"gabe\", votes: 2},\n          {name: \"mayna\", votes: 2},\n          {name: \"vince\", votes: 2},\n          {name: \"carlos\", votes: 1},\n          {name: \"francesca\", votes: 2},\n          {name: \"jinn\", votes: 1},\n          {name: \"kevin\", votes: 1},\n          {name: \"connie\", votes: 1},\n          {name: \"will\", votes: 2},\n        ]\n\n      for (var i = 0; i < testNames.length; i++) {\n        for (var j = 0; j < testNames[i].votes; j++) {\n          this.state.nominees.push(testNames[i].name);\n          this.setState({nominees: this.state.nominees});\n        }\n        this.handleNominees(testNames[i].name, testNames[i].votes);\n      } \n    } else if (multiplier.trim() !== \"\" && nominee.trim() !== \"\") {\n\n      for(var i = 0; i < multiplier; i++) {\n\n        this.state.nominees.push(nominee);\n        this.setState({nominees: this.state.nominees});\n      }\n\n      this.handleNominees(nominee, multiplier);\n\n    } else if (nominee.trim() !== \"\") {\n\n      this.state.nominees.push(nominee);\n      this.setState({nominees: this.state.nominees});\n      this.handleNominees(nominee, multiplier);\n\n    }\n\n    inputField.value = \"\";\n    multipleField.value = \"\";\n  }\n\n  handleNominees(nominee, multiplier) {\n    const n = nominee;\n    let m = \"\";\n    if(multiplier !== \"\") {\n      m = parseInt(multiplier);\n    } else {\n      m = 1;\n    }\n\n    if(this.state.timesOfNomination.length === 0 ){\n      this.state.timesOfNomination.push({name: n, times: m});\n      this.setState({timesOfNomination: this.state.timesOfNomination});\n    } else {\n      for (let [ i, v] of this.state.timesOfNomination.entries()) {\n        if(v.name === n) {\n          return this.setState(prevState => {\n            const current = {...prevState.timesOfNomination};\n            current[i].times = v.times + m;\n          });\n        }\n      }\n      this.state.timesOfNomination.push({name: n, times: m});\n      return this.setState({timesOfNomination: this.state.timesOfNomination});\n    }\n  }\n  \n  handleOnKeyPress (e) {\n    if(e.charCode == '13') {\n        this.handleAdd();\n       }\n  }\n  \n  handleWinner() {\n\n    \n    var inputField = document.getElementById(\"add\");\n    inputField.value = \"\";\n\n    const nominees = this.state.nominees;\n    \n    var nomLength = nominees.length;\n    var timeMultiplier = 1;\n    \n    while(nomLength > 1) {\n \n      setTimeout(() => {\n        this.removeNom(Math.floor(Math.random()*(this.state.nominees.length)))\n      }, 500*timeMultiplier);\n      \n      timeMultiplier++;\n      nomLength--;\n\n      if (nomLength === 1) {\n        \n        setTimeout(() => {\n          \n          const winner =  this.state.nominees[0];\n          this.setState({winner: winner});\n          this.setState({nominees: []});\n          this.setState({timesOfNomination: []});\n\n          db.add(nominees, winner);\n        \n      }, 500*timeMultiplier);\n    }\n  }\n }\n  \n  startAgain() {\n    this.setState({winner: \"\"});\n    this.setState({nominees: []});\n    this.setState({timesOfNomination: []});\n  }\n  \n  removeNom(index) {\n  var noms = [...this.state.nominees]; \n  let indexName = noms[index];\n\n  if (index !== -1) {\n    noms.splice(index, 1);\n    this.setState({nominees: noms});\n  }\n\n  //remove from timesOfNomination\n  for (let [ i, v] of this.state.timesOfNomination.entries()) {\n    if(v.name === indexName) {\n      if(v.times === 1) {\n        return this.setState({timesOfNomination: this.state.timesOfNomination.filter(i => i.name !== indexName)});\n      } else {\n        return this.setState(prevState => {\n          const current = {...prevState.timesOfNomination};\n          current[i].times = v.times -1;\n        });\n      }\n    }\n  }\n  \n}\n\n\n\n  \n  render () {\n    var show = this.state.winner === \"\" ? \"hide\" : \"show winner-container\";\n    var hideButton = this.state.winner === \"\" ? \"show\" : \"hide\";\n    var hideInput = this.state.winner === \"\" ? \"show\" : \"hide\";\n    var hideStartButton = this.state.winner === \"\" ? \"hide\" : \"show\";\n    \n    const nominees = this.state.timesOfNomination.map((value, i) => {\n      const name = value.name;\n      let times = \"\";\n      let liStyle = \"\";\n\n      times = value.times;\n      \n      if(times > 1) {\n        liStyle = {\n          fontSize: 25 + 3 * times + 'px',\n        };\n      } else {\n        liStyle = {\n          fontSize: '25px',\n        };\n      }\n\n      return (<li key={i} style={liStyle} className=\"animated fadeInUp\" onClick={() => this.removeNom(i)} > {name} <span>{times}</span></li>)\n    })\n    \n    return (\n      <div className=\"container\">\n        <div className=\"forms\">\n          <h1>PNI Creative <br/> Crushing it! Award</h1>\n          <div>\n            <Inputs \n              hideInput={hideInput}\n              onKeyPress={this.handleOnKeyPress.bind(this)}/>\n            <Buttons \n              hideButton={hideButton}\n              hideStartButton={hideStartButton}\n              handleWinner={this.handleWinner.bind(this)}\n              startAgain={this.startAgain.bind(this)}/>\n          </div>\n        </div>\n        <div className=\"content\">\n          <ul>\n            {nominees}\n          </ul>\n          <Winner winner={this.state.winner} hide={show} />\n        </div>\n       \n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react'\nvar db = require(\"./database.js\");\n\nclass Json extends React.Component {\n\t\n  render() {\n    return <pre id=\"data\">{db.read('data')}</pre>\n  }\n}\n\nexport default Json\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport Json from './Json';\nimport * as serviceWorker from './serviceWorker';\n\nconst routing = (\n  <Router>\n    <div>\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/json\" component={Json} />\n    </div>\n  </Router>\n)\n\nReactDOM.render(routing, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}